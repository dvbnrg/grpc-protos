syntax = "proto3";

package yandex.cloud.mdb.greenplum.v1;

import "google/protobuf/wrappers.proto";

import "yandex/cloud/validation.proto";


option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplum";
option java_outer_classname = "GPCF";
option java_package = "yandex.cloud.api.mdb.greenplum.v1";


message Resources {
  // ID of the preset for computational resources available to a host (CPU, memory etc.).
  // All available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage available to a host.
  int64 disk_size = 2;

  // Type of the storage environment for the host.
  //
  // Possible values:
  // * network-hdd - network HDD drive,
  // * network-ssd - network SSD drive,
  // * local-ssd - local SSD storage.
  string disk_type_id = 3;
}


message ConnectionPoolerConfig {
  enum PoolMode {
    POOL_MODE_UNSPECIFIED = 0;
  
    SESSION = 1;
  
    TRANSACTION = 2;
  }

  // Odyssey route server pool mode. Default is session mode.
  // https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string
  PoolMode mode = 1;

  // Odyssey Server pool size.
  // Keep the number of servers in the pool as much as 'pool_size'. Clients are put in a wait queue, when all servers are busy.
  // Set to zero to disable the limit.
  // https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer
  google.protobuf.Int64Value size = 2;

  // Server pool idle timeout.
  // Close an server connection when it becomes idle for 'pool_ttl' seconds.
  // Set to zero to disable.
  // https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer
  google.protobuf.Int64Value client_idle_timeout = 3;
}

// Configuration of master subcluster
message MasterSubclusterConfig {
  // Resources allocated to Greenplum master subcluster hosts.
  Resources resources = 1;

  // Configuration settings of a Greenplum master server.
  GreenplumMasterConfigSet config = 2;
}

// Configuration of segmet subcluster
message SegmentSubclusterConfig {
  // Resources allocated to Greenplum segment subcluster hosts.
  Resources resources = 1; 

  // Configuration settings of a Greenplum segment server.
  GreenplumSegmentConfigSet config = 2;
}


// Greenplum master subcluster configuration options. Detailed description for each set of options
//
// Any options not listed here are not supported.
message GreenplumMasterConfig {
  enum LogLevel {
    LOG_LEVEL_UNSPECIFIED = 0;
  
    TRACE = 1;
  
    DEBUG = 2;
  
    INFORMATION = 3;
  
    WARNING = 4;
  
    ERROR = 5;
  }
  
  // Logging level for the Greenplum master subcluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
  LogLevel log_level = 1;
  
  // Maximum number of inbound connections.
  google.protobuf.Int64Value max_connections = 2;
  
  // The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
  google.protobuf.StringValue timezone = 3;

  // Odyssey pool settings
  ConnectionPoolerConfig pool = 4;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 13;

  // For queries that are managed by resource queues or resource groups,
  // this parameter determines when Greenplum Database terminates running queries based on the amount of memory the queries are using.
  // A value of 100 disables the automatic termination of queries based on the percentage of memory that is utilized.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#runaway_detector_activation_percent
  google.protobuf.Int64Value runaway_detector_activation_percent = 14;

  // How many keepalives may be lost before the connection is considered dead. A value of 0 uses the system default.
  // If TCP_KEEPCNT is not supported, this parameter must be 0.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#tcp_keepalives_count
  google.protobuf.Int64Value tcp_keepalives_count = 15;

  // How many seconds to wait for a response to a keepalive before retransmitting. A value of 0 uses the system default.
  // If TCP_KEEPINTVL is not supported, this parameter must be 0.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#tcp_keepalives_interval
  google.protobuf.Int64Value tcp_keepalives_interval = 16;

  // When an SQL query reads from an external table, the parameter value specifies the amount of time in seconds that
  // Greenplum Database waits before cancelling the query when data stops being returned from the external table.
  // The default value of 0, specifies no time out. Greenplum Database does not cancel the query.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#readable_external_table_timeout
  google.protobuf.Int64Value readable_external_table_timeout = 19;

  // Sets the amount of data per-peer to be queued by the default UDPIFC interconnect on senders.
  // Increasing the depth from its default value will cause the system to use more memory, but may increase performance.
  // Reasonable values for this parameter are between 1 and 4. Increasing the value might radically increase the amount of memory used by the system.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_interconnect_snd_queue_depth
  google.protobuf.Int64Value gp_interconnect_snd_queue_depth = 20;

  // Sets the amount of data per-peer to be queued by the Greenplum Database interconnect on receivers
  // (when data is received but no space is available to receive it the data will be dropped, and the transmitter will need to resend it)
  // for the default UDPIFC interconnect.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_interconnect_queue_depth
  google.protobuf.Int64Value gp_interconnect_queue_depth = 21;

  enum LogStatement {
    LOG_STATEMENT_UNSPECIFIED = 0;
  
    NONE = 1;
  
    DDL = 2;

    MOD = 3;

    ALL = 4;
  }

  // Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
  // MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
  // PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement
  // Default value is ddl
  LogStatement log_statement = 22;

  // Causes the duration of every completed statement which satisfies log_statement to be logged.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_duration
  google.protobuf.BoolValue log_duration = 23;

  // For a partitioned table, controls whether the ROOTPARTITION keyword is required to collect root partition statistics
  // when the ANALYZE command is run on the table. GPORCA uses the root partition statistics when generating a query plan.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#optimizer_analyze_root_partition
  google.protobuf.BoolValue optimizer_analyze_root_partition = 24;
  
  // Sets the number of segments that will scan external table data during an external table operation,
  // the purpose being not to overload the system with scanning data and take away resources from other concurrent operations.
  // This only applies to external tables that use the gpfdist:// protocol to access external table data.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_external_max_segs
  google.protobuf.Int64Value gp_external_max_segs = 25;

  // Specifies the allowed timeout for the fault detection process (ftsprobe) to establish a connection to a segment before declaring it down.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_fts_probe_timeout
  google.protobuf.Int64Value gp_fts_probe_timeout = 26;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 27;

  enum AutostatsModeInFunctions {
    AUTOSTATS_MODE_IN_FUNCTIONS_UNSPECIFIED = 0;
  
    MODE_NONE = 1;
  
    ON_CHANGE = 2;

    ON_NO_STATS = 3;
  }

  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_autostats_mode_in_functions
  AutostatsModeInFunctions gp_autostats_mode_in_functions= 28;
}


// Greenplum segment subcluster configuration options. Detailed description for each set of options
//
// Any options not listed here are not supported.
message GreenplumSegmentConfig {
  enum LogLevel {
    LOG_LEVEL_UNSPECIFIED = 0;
  
    TRACE = 1;
  
    DEBUG = 2;
  
    INFORMATION = 3;
  
    WARNING = 4;
  
    ERROR = 5;
  }
  
  // Logging level for the Greenplum segment subcluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
  LogLevel log_level = 1;
  
  // Maximum number of inbound connections.
  google.protobuf.Int64Value max_connections = 2;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 7;
    
  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 8;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 9;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 10;

  enum GPResourceManager {
    GP_RESOURCE_MANAGER_UNSPECIFIED = 0;
  
    QUEUE = 1;
  
    GROUP = 2;
  }
  // Identifies the resource management scheme currently enabled in the Greenplum Database cluster. The default scheme is to use resource queues.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_manager
  // "group" is the default value
  GPResourceManager gp_resource_manager = 11;

  // Identifies the maximum percentage of system CPU resources to allocate to resource groups on each Greenplum Database segment node.
  // Note: The gp_resource_group_cpu_limit server configuration parameter is enforced only when resource group-based resource management is active.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_group_cpu_limit
  google.protobuf.FloatValue gp_resource_group_cpu_limit = 17;

  // Identifies the maximum percentage of system memory resources to allocate to resource groups on each Greenplum Database segment node.
  // Note: The gp_resource_group_memory_limit server configuration parameter is enforced only when resource group-based resource management is active.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_group_memory_limit
  google.protobuf.FloatValue gp_resource_group_memory_limit = 18;
}

message GreenplumMasterConfigSet {
  // Effective settings for a Greenplum master subcluster (a combination of settings defined
  // in [user_config] and [default_config]).
  GreenplumMasterConfig effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum master subcluster.
  GreenplumMasterConfig user_config = 2;

  // Default configuration for a Greenplum master subcluster.
  GreenplumMasterConfig default_config = 3;
}

message GreenplumSegmentConfigSet {
  // Effective settings for a Greenplum segment subcluster (a combination of settings defined
  // in [user_config] and [default_config]).
  GreenplumSegmentConfig effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum segment subcluster.
  GreenplumSegmentConfig user_config = 2;

  // Default configuration for a Greenplum segment subcluster.
  GreenplumSegmentConfig default_config = 3;
}
